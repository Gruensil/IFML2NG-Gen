// Generated by ContextProviderGenerator
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
// Contains Objects that push new data to the Context Controller
// Code for API/Library access has to be inserted in the file:"deviceAPI.service.ts" 
// in the folder: static/app/context/providers/
var core_1 = require('@angular/core');
var Rx_1 = require('rxjs/Rx');
var Language_1 = require('../types/Language');
// PROTECTED REGION ID general ENABLED START
// PROTECTED REGION END
var DeviceAPIService = (function () {
    // PROTECTED REGION ID deviceAPI ENABLED START
    // PROTECTED REGION END
    function DeviceAPIService() {
        var _this = this;
        this._languageSubject = new Rx_1.BehaviorSubject(0);
        this.languageSubject = this._languageSubject.asObservable();
        this._ambientLightSubject = new Rx_1.BehaviorSubject(0);
        this.ambientLightSubject = this._ambientLightSubject.asObservable();
        this._movementSubject = new Rx_1.BehaviorSubject(0);
        this.movementSubject = this._movementSubject.asObservable();
        this._deviceTypeSubject = new Rx_1.BehaviorSubject("init");
        this.deviceTypeSubject = this._deviceTypeSubject.asObservable();
        // PROTECTED REGION ID constructor ENABLED START
        window.addEventListener('devicelight', function (event) {
            if (event.value > 300) {
                _this.ambientLight = 2;
            }
            else if (event.value > 100) {
                _this.ambientLight = 1;
            }
            else {
                _this.ambientLight = 0;
            }
            _this.getAmbientLight();
        });
        // window.addEventListener('online', event => {
        //     console.log("online" + event.returnValue);
        // });
        var i = 1;
        // Updates Movement information for vertical movement
        window.addEventListener("devicemotion", function (event) {
            // x,y,z are the accelerations on different axis
            // all combined have a value in still position of ~13
            // this is due acceleration of gravtiy
            // if the device is shaken or moved the value rises
            var x = event.accelerationIncludingGravity.x;
            var y = event.accelerationIncludingGravity.y;
            var z = event.accelerationIncludingGravity.z;
            var w = y + z + x;
            if (i > 75) {
                console.log(w);
                i = 0;
            }
            else {
                i = i + 1;
            }
            if (w > 17 || w < 8) {
                _this.movement = 2;
            }
            else if (w > 15 || w < 11) {
                _this.movement = 1;
            }
            else {
                _this.movement = 0;
            }
        });
        // PROTECTED REGION END
    }
    DeviceAPIService.prototype.getLanguage = function () {
        // PROTECTED REGION ID language ENABLED START
        switch (navigator.language) {
            case "de":
                this.language = Language_1.Language.german;
                break;
            case "en" || "en-us":
                this.language = Language_1.Language.english;
                break;
            case "it":
                this.language = Language_1.Language.italian;
                break;
            default: this.language = Language_1.Language.english;
        }
        // PROTECTED REGION END
        this._languageSubject.next(this.language);
    };
    DeviceAPIService.prototype.getAmbientLight = function () {
        // PROTECTED REGION ID ambientLight ENABLED START
        // PROTECTED REGION END
        this._ambientLightSubject.next(this.ambientLight);
    };
    DeviceAPIService.prototype.getMovement = function () {
        // PROTECTED REGION ID movement ENABLED START
        // PROTECTED REGION END
        this._movementSubject.next(this.movement);
    };
    DeviceAPIService.prototype.getDeviceType = function () {
        // PROTECTED REGION ID deviceType ENABLED START
        this.deviceType = navigator.platform;
        // PROTECTED REGION END
        this._deviceTypeSubject.next(this.deviceType);
    };
    DeviceAPIService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], DeviceAPIService);
    return DeviceAPIService;
}());
exports.DeviceAPIService = DeviceAPIService;
//# sourceMappingURL=deviceAPI.service.js.map